let tg = window.Telegram.WebApp;
tg.expand();

tg.MainButton.textColor = '#FFFFFF';
tg.MainButton.color = '#31B545';

// Pagination settings
const ITEMS_PER_PAGE = 12;
let currentPage = 1;
let totalItems = 0;
let allItems = [];

// Initialize pagination
function initializePagination() {
	const container = document.querySelector(".inner");
	allItems = Array.from(container.querySelectorAll(".item"));
	totalItems = allItems.length;
	
	// Hide all items initially
	allItems.forEach(item => item.style.display = "none");
	
	// Show first page
	showPage(currentPage);
	
	// Add pagination controls
	addPaginationControls();
}

// Show items for specific page
function showPage(page) {
	const start = (page - 1) * ITEMS_PER_PAGE;
	const end = start + ITEMS_PER_PAGE;
	
	// Hide all items
	allItems.forEach(item => item.style.display = "none");
	
	// Show items for current page
	allItems.slice(start, end).forEach(item => item.style.display = "");
	
	// Update current page
	currentPage = page;
	updatePaginationControls();
}

// Add pagination controls to the page
function addPaginationControls() {
	const paginationDiv = document.querySelector(".pagination");
	if (!paginationDiv) return;

	// –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
	paginationDiv.innerHTML = "";

	const paginationContent = document.createElement("div");
	paginationContent.className = "pagination-content";

	const prevButton = document.createElement("button");
	prevButton.id = "prevPage";
	prevButton.className = "pagination-btn";
	prevButton.innerHTML = "‚¨ÖÔ∏è";
	paginationContent.appendChild(prevButton);

	const pageNumbers = document.createElement("div");
	pageNumbers.className = "page-numbers";
	paginationContent.appendChild(pageNumbers);

	const nextButton = document.createElement("button");
	nextButton.id = "nextPage";
	nextButton.className = "pagination-btn";
	nextButton.innerHTML = "‚û°Ô∏è";
	paginationContent.appendChild(nextButton);

	paginationDiv.appendChild(paginationContent);

	prevButton.addEventListener("click", () => {
		if (currentPage > 1) {
			showPage(currentPage - 1);
		}
	});

	nextButton.addEventListener("click", () => {
		if (currentPage < Math.ceil(totalItems / ITEMS_PER_PAGE)) {
			showPage(currentPage + 1);
		}
	});

	updatePageNumbers();
}


// Update pagination controls state
function updatePaginationControls() {
	const prevBtn = document.getElementById("prevPage");
	const nextBtn = document.getElementById("nextPage");
	
	prevBtn.disabled = currentPage === 1;
	nextBtn.disabled = currentPage === Math.ceil(totalItems / ITEMS_PER_PAGE);
	
	updatePageNumbers();
}

// Update page numbers display
function updatePageNumbers() {
	const pageNumbers = document.querySelector(".page-numbers");
	const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
	
	// Clear existing page numbers
	pageNumbers.innerHTML = "";
	
	// Calculate which page numbers to show
	let startPage = Math.max(1, currentPage - 2);
	let endPage = Math.min(totalPages, startPage + 4);
	
	// Adjust start page if we're near the end
	if (endPage - startPage < 4) {
		startPage = Math.max(1, endPage - 4);
	}
	
	// Add first page and ellipsis if needed
	if (startPage > 1) {
		addPageButton(1, pageNumbers);
		if (startPage > 2) {
			const ellipsis = document.createElement("span");
			ellipsis.className = "page-ellipsis";
			ellipsis.textContent = "...";
			pageNumbers.appendChild(ellipsis);
		}
	}
	
	// Add page numbers
	for (let i = startPage; i <= endPage; i++) {
		addPageButton(i, pageNumbers);
	}
	
	// Add last page and ellipsis if needed
	if (endPage < totalPages) {
		if (endPage < totalPages - 1) {
			const ellipsis = document.createElement("span");
			ellipsis.className = "page-ellipsis";
			ellipsis.textContent = "...";
			pageNumbers.appendChild(ellipsis);
		}
		addPageButton(totalPages, pageNumbers);
	}
}

// Helper function to add a page button
function addPageButton(pageNum, container) {
	const button = document.createElement("button");
	button.className = "page-number-btn";
	if (pageNum === currentPage) {
		button.classList.add("active");
	}
	button.textContent = pageNum;
	button.addEventListener("click", () => showPage(pageNum));
	container.appendChild(button);
}

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
const searchInput = document.getElementById("searchInput");

function performSearch() {
	const searchText = searchInput.value.toLowerCase();
	
	// Filter items based on search
	allItems.forEach(itemElement => {
		const captionElement = itemElement.querySelector(".caption");
		if (!captionElement) return;
		
		const caption = captionElement.textContent.trim().toLowerCase();
		itemElement.style.display = caption.includes(searchText) ? "" : "none";
	});
	
	// Reset to first page after search
	currentPage = 1;
	updatePaginationControls();
}
searchInput.addEventListener("input", performSearch);

let item = "";
let itemPrice = 0;  // –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
Telegram.WebApp.onEvent("mainButtonClicked", function() {
	// –ó–¥–µ—Å—å —É–∂–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞
	tg.sendData(JSON.stringify({
		label: item,
		price: itemPrice
	}));
});

let cart = []; // –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤

const cartIcon = document.getElementById("cartIcon");
const cartCount = document.getElementById("cartCount");
const cartModal = document.getElementById("cartModal");
const cartItems = document.getElementById("cartItems");
const totalPriceEl = document.getElementById("totalPrice");
const checkoutBtn = document.getElementById("checkoutBtn");

// –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å" –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
checkoutBtn.style.display = "none";

// –£–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –º—É—Å–æ—Ä–∫–µ üóë
function updateCartDisplay() {
	cartCount.textContent = cart.length;
	cartItems.innerHTML = "";
	let total = 0;

	cart.forEach((item, index) => {
		const li = document.createElement("li");
		li.innerHTML = `${item.label} - ${item.price} ‚≠êÔ∏è 
			<span style="cursor: pointer; color: red; margin-left: 10px;" data-index="${index}">‚ùå</span>`;
		cartItems.appendChild(li);
		total += item.price;
	});

	totalPriceEl.textContent = total;

	// –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
	checkoutBtn.style.display = total > 0 ? "block" : "none";

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ ‚ùå
	cartItems.querySelectorAll("span[data-index]").forEach(span => {
		span.addEventListener("click", (e) => {
			const i = parseInt(e.target.getAttribute("data-index"));
			cart.splice(i, 1);
			updateCartDisplay();
		});
	});
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
cartIcon.addEventListener("click", () => {
	cartModal.classList.toggle("show");

	// –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–∑–∏–Ω—ã –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
	updateCartDisplay();
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
document.querySelectorAll(".btn").forEach(btn => {
	btn.addEventListener("click", () => {
		const label = btn.getAttribute("data-label");
		const price = parseInt(btn.getAttribute("data-price"));
		const id = btn.getAttribute("data-id");

		if (!label || isNaN(price) || !id) return;

		cart.push({ id, label, price });
		updateCartDisplay();

		// –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
		Telegram.WebApp.HapticFeedback.impactOccurred('medium');
		
		// –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω–∫–∏
		cartIcon.classList.add("shake");
		setTimeout(() => cartIcon.classList.remove("shake"), 600);
		
	});
});

document.addEventListener("DOMContentLoaded", function () {
	const topBar = document.querySelector('.top-bar');
	const container = document.querySelector('.container');

	if (topBar && container) {
		container.style.paddingTop = topBar.offsetHeight + 'px';
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
checkoutBtn.addEventListener("click", () => {
	tg.sendData(JSON.stringify({
		items: cart,
		totalPrice: cart.reduce((sum, item) => sum + item.price, 0)
	}));
});

/* –°–û–†–¢–ò–†–û–í–ê–õ–ö–ê */
const sortToggle = document.getElementById("sortToggle");
const sortLabel = document.getElementById("sortLabel");

function sortItems(comparator) {
	const container = document.querySelector(".inner");
	
	// Sort all items
	allItems.sort(comparator);
	
	// Re-append all items to maintain order
	allItems.forEach(item => container.appendChild(item));
	
	// Show current page
	showPage(currentPage);
}

// —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ data-id
const idSortToggle = document.getElementById("idSortToggle");
const idSortLabel = document.getElementById("idSortLabel");

idSortToggle.addEventListener("change", () => {
	sortItems((a, b) => {
		const idA = parseInt(a.querySelector(".btn").dataset.id);
		const idB = parseInt(b.querySelector(".btn").dataset.id);
		return idSortToggle.checked ? idB - idA : idA - idB;
	});
	
	idSortLabel.textContent = idSortToggle.checked ? "Newest first" : "Oldest first";
});

/* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏*/
const randomSortBtn = document.getElementById('randomSortBtn');

randomSortBtn.addEventListener('click', () => {
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
	randomSortBtn.classList.add('pressed');

	// –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ 300 –º—Å (–ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏)
	setTimeout(() => {
		randomSortBtn.classList.remove('pressed');
	}, 300);

	// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
	const container = document.querySelector('.inner');
	const items = Array.from(container.querySelectorAll('.item'));

	// –§–∏—à–µ—Ä-–ô–µ–π—Ç—Å
	for (let i = items.length - 1; i > 0; i--) {
		const j = Math.floor(Math.random() * (i + 1));
		[items[i], items[j]] = [items[j], items[i]];
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º DOM
	items.forEach(item => container.appendChild(item));
});

/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ */
document.addEventListener('DOMContentLoaded', function () {
	const toggleBtn = document.getElementById('toggleFiltersBtn');
	const bottomRow = document.querySelector('.bottom-row');

	toggleBtn.addEventListener('click', function () {
		bottomRow.classList.toggle('hidden');
	});
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
document.getElementById("closeCartModal").addEventListener("click", () => {
	cartModal.classList.remove("show");
});

// Initialize pagination when DOM is loaded
document.addEventListener("DOMContentLoaded", function() {
	initializePagination();
	
	// Modified sort toggle event listener
	sortToggle.addEventListener("change", () => {
		sortItems((a, b) => {
			const priceA = parseInt(a.querySelector(".btn").dataset.price);
			const priceB = parseInt(b.querySelector(".btn").dataset.price);
			return sortToggle.checked ? priceB - priceA : priceA - priceB;
		});
		
		sortLabel.textContent = sortToggle.checked ? "Price: ‚¨áÔ∏è" : "Price: ‚¨ÜÔ∏è";
	});
	
	// Modified ID sort toggle event listener
	idSortToggle.addEventListener("change", () => {
		sortItems((a, b) => {
			const idA = parseInt(a.querySelector(".btn").dataset.id);
			const idB = parseInt(b.querySelector(".btn").dataset.id);
			return idSortToggle.checked ? idB - idA : idA - idB;
		});
		
		idSortLabel.textContent = idSortToggle.checked ? "Newest first" : "Oldest first";
	});
	
	// Modified random sort button event listener
	randomSortBtn.addEventListener("click", () => {
		randomSortBtn.classList.add("pressed");
		setTimeout(() => randomSortBtn.classList.remove("pressed"), 300);
		
		// Fisher-Yates shuffle
		for (let i = allItems.length - 1; i > 0; i--) {
			const j = Math.floor(Math.random() * (i + 1));
			[allItems[i], allItems[j]] = [allItems[j], allItems[i]];
		}
		
		// Show current page
		showPage(currentPage);
	});
});

// Initialize pagination
initializePagination();

 